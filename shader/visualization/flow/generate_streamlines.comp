#version 450

#extension GL_ARB_bindless_texture : require

layout (local_size_x = 32) in;

layout (std430, binding = SEEDS_SSBO_BINDING) buffer seeds_ssbo {
    vec4 seed[];
};

layout (std430, binding = STREAMLINES_SSBO_BINDING) buffer lines_ssbo {
    vec4 line[];
};

layout (std430, binding = VOLUME_GRID_BUFFER) buffer volume_grid {
    vec4 bb_min;
    vec4 bb_max;
    float cell_size;
    float cell_diag;
};

vec3 gen_3d_uv(vec3 p) {
    return (p - vec3(bb_min)) / vec3(bb_max - bb_min);
}

layout(bindless_sampler) uniform sampler3D data;

uniform int step_count;
uniform int line_count;
uniform float step_size;
uniform float max_flow;
uniform bool equal_length;

vec4 rk4(vec4 curr_pos) {
    vec3 uv = gen_3d_uv(curr_pos.xyz);
    vec4 curr_vel = texture(data, uv);
    if (curr_vel.a < 0.5) {
        return vec4(0,0,0,1);
    }
    float h = step_size / (equal_length ? length(curr_vel.xyz) : max_flow);
    vec4 k1 = h * curr_vel;
    vec4 k2 = h * texture(data, gen_3d_uv(curr_pos.xyz + k1.xyz / 2.0f));
    vec4 k3 = h * texture(data, gen_3d_uv(curr_pos.xyz + k2.xyz / 2.0f));
    vec4 k4 = h * texture(data, gen_3d_uv(curr_pos.xyz + k3.xyz));
    return 1.0f / 6.0f * vec4(vec3(k1 + 2.0f * k2 + 2.0f * k3 + k4), 0.0f);
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= line_count) {
        return;
    }
    vec4 pos = seed[id];
    vec3 uv = gen_3d_uv(pos.xyz);
    vec4 vel = texture(data, uv);
    if (vel.w < 0.5) {
        return;
    }
    int curr_step = 0;
    int half_step_count = step_count / 2;
    while (curr_step <= half_step_count) {
        vel = rk4(pos);
        if (vel.w > 0.5) {
            break;
        }
        pos -= vel;
        line[id * step_count + half_step_count - curr_step] = pos;
        curr_step++;
    }
    while(curr_step <= half_step_count) {
        line[id * step_count + half_step_count - curr_step] = pos;
        curr_step++;
    }
    pos = seed[id];
    while (curr_step < step_count) {
        line[id * step_count + curr_step] = pos;
        vel = rk4(pos);
        if (vel.w > 0.5) {
            break;
        }
        pos += vel;
        curr_step++;
    }
    while(curr_step < step_count) {
        line[id * step_count + curr_step] = pos;
        curr_step++;
    }
    pos.w = 1.0f;
}
